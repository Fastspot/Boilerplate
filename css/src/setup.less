/* ==================================================================
	 Variables
================================================================== */

	@root_font_size: 16;

	@base_transition_duration: 0.25s;
	@base_transition_timing: linear;
	@base_transition_delay: 0s;

	@min_sm:		~"only screen and (min-width:" (@mq_min_sm * 1px) + ~")";
	@min_md:		~"only screen and (min-width:" (@mq_min_md * 1px) + ~")";
	@min_lg:		~"only screen and (min-width:" (@mq_min_lg * 1px) + ~")";
	@min_xl:		~"only screen and (min-width:" (@mq_min_xl * 1px) + ~")";

	@max_sm:		~"only screen and (max-width:" (@mq_min_sm - 1px) + ~")";
	@max_md:		~"only screen and (max-width:" (@mq_min_md - 1px) + ~")";
	@max_lg:		~"only screen and (max-width:" (@mq_min_lg - 1px) + ~")";
	@max_xl:		~"only screen and (max-width:" (@mq_min_xl - 1px) + ~")";

	@and_max_sm:	~"and (max-width:" (@mq_min_sm - 1px) + ~")";
	@and_max_md:	~"and (max-width:" (@mq_min_md - 1px) + ~")";
	@and_max_lg:	~"and (max-width:" (@mq_min_lg - 1px) + ~")";
	@and_max_xl:	~"and (max-width:" (@mq_min_xl - 1px) + ~")";

	@margin_sm: 20px;
	@margin_md: 40px;
	@margin_lg: 60px;
	@margin_xl: 80px;


/* ==================================================================
	 Colors
================================================================== */

	@white: #fff;
	@black: #000;


/* ==================================================================
	 Mixins
================================================================== */

	.transition(@duration:0.25s, @timing:linear, @delay:0) {
		transition:
			background-color @duration @timing,
			border-color @duration @timing,
			box-shadow @duration @timing,
			color @duration @timing,
			opacity @duration @timing;
	}

	.transition_link(@duration:0.25s, @timing:linear, @delay:0) {
		&,
		&:link,
		&:visited,
		&:hover,
		&:active,
		&:focus {
			.transition(@duration, @timing, @delay)
		}
	}

	.font_size(@px_size) {
		@px: @px_size;
		@rem: (@px_size / @root_font_size);
		font-size: ~"@{px}px";
		font-size: ~"@{rem}rem";
	}

	.rgba_background(@base, @alpha) {
		background-color: rgba(red(@base), green(@base), blue(@base), @alpha);
	}

	.rgba_text(@base, @alpha) {
		color: rgba(red(@base), green(@base), blue(@base), @alpha);
	}

	.columns(@count, @gap) {
		column-count: @count;
		column-gap: @gap;

		& > * {
			// autoprefixer does not prefix this one correctly just yet
			-webkit-column-break-inside: avoid;
			column-break-inside: avoid;
		}
	}

	.icon_sprite(@left:0, @top:0) {
		background: url(../images/icons.png) no-repeat @left @top;

		.svg & {
			background-image: url(../images/icons.svg);
		}
	}

	.scale_sprite(@percent:1, @imageOffsetX:0, @imageOffsetY:0) {
		background-size: floor(@sprite_width * @percent) floor(@sprite_height * @percent);
		background-position: floor(@imageOffsetX * @percent) floor(@imageOffsetY * @percent);
	}

	.icon_indent() {
		overflow: hidden;
		text-indent: 200%;
		white-space: nowrap;
	}

	.cover() {
		height: 100%;
		width: 100%;

		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}

	/*
		Cover Image:
			Use on wrapping element of img (<figure>, <picture>)
			Will work like background-size: cover; but with static images
			Won't scale it down though, so good to use with picturefill
	*/

	.cover_image() {
		position: relative;

		z-index: 1;

		img {
			width: auto;
			height: auto;

			position: absolute;
			top: 50%;
			left: 50%;

			min-width: 100% !important;
			min-height: 100% !important;
			transform: translate(-50%, -50%);
			z-index: 0;
		}
	}

	.center() {
		position: absolute;
		top: 50%;
		left: 50%;

		transform: translate(-50%, -50%);
	}

	.center_vertical() {
		position: absolute;
		top: 50%;

		transform: translateY(-50%);
	}

	.absolute_center_parent() {
		position: relative;
	}

	.absolute_center() {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;

		margin: auto;
	}

	.ellipsis() {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.gradient_vertical(@startColor: black, @endColor: white) {
		background-color: @startColor;
		background: linear-gradient(to bottom, @startColor, @endColor);
	}

	.gradient_horizontal(@startColor: black, @endColor: white) {
		background-color: @startColor;
		background: linear-gradient(to right, @startColor, @endColor);
	}

	.rgba_raw(@base, @alpha) {
		@return: rgba(red(@base), green(@base), blue(@base), @alpha);
	}
