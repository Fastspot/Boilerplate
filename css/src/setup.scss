/* ==========================================================================
	Variables
============================================================================= */

$root_font_size: 16;

$base_transition_duration: .25s;
$base_transition_timing: ease;
$base_transition_delay: .05s;

$mq_min_ht: 800;
$mq_min_xs: 320;
$mq_min_sm: 500;
$mq_min_md: 740;
$mq_min_lg: 980;
$mq_min_xl: 1220;

$min_xs: "screen and (min-width:" + ($mq_min_xs * 1px) + ")";
$min_sm: "screen and (min-width:" + ($mq_min_sm * 1px) + ")";
$min_md: "screen and (min-width:" + ($mq_min_md * 1px) + ")";
$min_lg: "screen and (min-width:" + ($mq_min_lg * 1px) + ")";
$min_xl: "screen and (min-width:" + ($mq_min_xl * 1px) + ")";

$max_xs: "screen and (max-width:" + ($mq_min_xs - 1px) + ")";
$max_sm: "screen and (max-width:" + ($mq_min_sm - 1px) + ")";
$max_md: "screen and (max-width:" + ($mq_min_md - 1px) + ")";
$max_lg: "screen and (max-width:" + ($mq_min_lg - 1px) + ")";
$max_xl: "screen and (max-width:" + ($mq_min_xl - 1px) + ")";

$margin_sm: 20px;
$margin_md: 40px;
$margin_lg: 60px;
$margin_xl: 80px;


/* ==========================================================================
	Mixins
============================================================================= */

// 1. IE 10/11 uses a non-standard

@mixin columns($count, $gap: 0) {
	column-count: $count;
	column-gap: $gap;

	& > * {
		column-break-inside: avoid;
		break-inside: avoid; // 1
	}
}

@mixin cover() {
	height: 100%;
	width: 100%;

	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

/*
	Cover Image:
	Use on wrapping element of img (<figure>, <picture>)
	Will work like background-size: cover; but with static images
	Won't scale it down though, so good to use with picturefill
*/

@mixin cover_image() {
	position: relative;
	z-index: 2;

	img {
		width: auto;
		height: auto;

		position: absolute;
		top: 50%;
		left: 50%;

		min-width: 100% !important;
		min-height: 100% !important;
		transform: translate(-50%, -50%);
		z-index: 0;
	}
}

@mixin center() {
	position: absolute;
	top: 50%;
	left: 50%;

	transform: translate(-50%, -50%);
}

@mixin center_vertical() {
	position: absolute;
	top: 50%;

	transform: translateY(-50%);
}

@mixin absolute_center() {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;

	margin: auto;
}

@mixin text_indent($height: 0) {
	display: block;
	line-height: $height;
	overflow: hidden;
	text-indent: 100%;
}

@mixin ellipsis() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// 1. Filter for <= IE 9, does not work on pseudo elements

@mixin gradient_vertical($startColor: black, $endColor: white) {
	background-color: $startColor;
	background:
		linear-gradient(
			to bottom,
				$startColor,
				$endColor
		);

	$ieStartColor: argb($startColor);
	$ieEndColor: argb($endColor);

	filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ieStartColor}', endColorstr='#{ieEndColor}', GradientType=0)"; // 1
}

// 1. Filter for <= IE 9, does not work on pseudo elements

@mixin gradient_horizontal($startColor: black, $endColor: white) {
	background-color: $startColor;
	background:
		linear-gradient(
			to right,
				$startColor,
				$endColor
		);

	$ieStartColor: argb($startColor);
	$ieEndColor: argb($endColor);

	filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ieStartColor}', endColorstr='#{ieEndColor}', GradientType=1)"; // 1
}

@mixin font_smoothing() {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin killFlicker() {
	-webkit-font-smoothing: auto;
	transform: translateZ(0);
}

@mixin word_break() {
	overflow-wrap: break-word;
	word-wrap: break-word;
	word-break: break-all;
	word-break: break-word;
	hyphens: auto;
}
