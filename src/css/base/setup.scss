/* ==========================================================================
	Setup
============================================================================= */

// Variables
// =============================================================================

$root_font_size: 16;

$base_speed: .25s;
$base_timing: ease;
$base_delay: .05s;

$mq_min_ht: 800;
$mq_min_xs: 320;
$mq_min_sm: 500;
$mq_min_md: 740;
$mq_min_lg: 980;
$mq_min_xl: 1220;
$mq_min_xxl: 1270;

$min_xs: "screen and (min-width:" + ($mq_min_xs * 1px) + ")";
$min_sm: "screen and (min-width:" + ($mq_min_sm * 1px) + ")";
$min_md: "screen and (min-width:" + ($mq_min_md * 1px) + ")";
$min_lg: "screen and (min-width:" + ($mq_min_lg * 1px) + ")";
$min_xl: "screen and (min-width:" + ($mq_min_xl * 1px) + ")";
$min_xxl: "screen and (min-width:" + ($mq_min_xxl * 1px) + ")";

$max_xs: "screen and (max-width:" + ($mq_min_xs - 1px) + ")";
$max_sm: "screen and (max-width:" + ($mq_min_sm - 1px) + ")";
$max_md: "screen and (max-width:" + ($mq_min_md - 1px) + ")";
$max_lg: "screen and (max-width:" + ($mq_min_lg - 1px) + ")";
$max_xl: "screen and (max-width:" + ($mq_min_xl - 1px) + ")";
$max_xxl: "screen and (max-width:" + ($mq_min_xxl - 1px) + ")";

$and_max_sm: "and (max-width:" + ($mq_min_sm - 1px) + ")";
$and_max_md: "and (max-width:" + ($mq_min_md - 1px) + ")";
$and_max_lg: "and (max-width:" + ($mq_min_lg - 1px) + ")";
$and_max_xl: "and (max-width:" + ($mq_min_xl - 1px) + ")";
$and_max_xxl: "and (max-width:" + ($mq_min_xxl - 1px) + ")";

$margin_sm: 40px;
$margin_md: 50px;
$margin_lg: 60px;
$margin_xl: 80px;


// Mixins
// =============================================================================

@mixin type_spread(
	$min: (30, 40),
	$max: (70, 60),
	$mqs: (#{$min_sm}, #{$min_md}, #{$min_lg})
) {
	$dFS: (nth($max, 1) - nth($min, 1)) / length($mqs);
	$dLH: (nth($max, 2) - nth($min, 2)) / length($mqs);

	@if ($dFS < 1) {
		@warn "The font-size spread is too thin for the type_spread mixin";
	}

	@if ($dLH < 1) {
		@warn "The line-height spread is too thin for the type_spread mixin";
	}

	font-size: nth($min, 1) * 1px;
	line-height: (nth($min, 2) / nth($min, 1));

	@for $i from 1 through length($mqs) {

		@media #{nth($mqs, $i)} {
			$nFS: floor(nth($min, 1) + ($dFS * $i));
			font-size: $nFS * 1px;
			$nLH: floor(nth($min, 2) + ($dLH * $i));
			line-height: ($nLH / $nFS);
		}
	}
}

@mixin mq_switch() {

	&_sm {

		@media #{$min_lg} {
			display: none;
		}
	}

	&_lg {

		@media #{$max_lg} {
			display: none;
		}
	}
}

// 1. IE 10/11 uses a non-standard

@mixin columns($count, $gap: 0) {
	column-count: $count;
	column-gap: $gap;

	& > * {
		column-break-inside: avoid;
		break-inside: avoid; // 1
	}
}

@mixin cover() {
	height: 100%;
	width: 100%;

	position: absolute;
	top: 0;
	left: 0;
}

// Cover Image:
// Use on wrapping element of img (<figure>, <picture>)
// Will work like background-size: cover; but with static images
// Won't scale it down though, so good to use with picturefill

@mixin cover_image() {
	position: relative;
	z-index: 2;

	img {
		width: auto;
		height: auto;

		position: absolute;
		top: 50%;
		left: 50%;

		min-width: 100% !important;
		min-height: 100% !important;
		transform: translate(-50%, -50%);
		z-index: 0;
	}
}

@mixin center() {
	position: absolute;
	top: 50%;
	left: 50%;

	transform: translate(-50%, -50%);
}

@mixin center_vertical() {
	position: absolute;
	top: 50%;

	transform: translateY(-50%);
}

@mixin absolute_center() {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;

	margin: auto;
}

@mixin text_indent($height: 0) {
	display: block;
	line-height: $height;
	overflow: hidden;
	text-indent: 100%;
}

@mixin ellipsis() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// 1. Filter for <= IE 9, does not work on pseudo elements

@mixin gradient_right($startColor: black, $endColor: white) {
	background-color: $startColor;
	background:
		linear-gradient(
			to right,
				$startColor,
				$endColor
		);

	$ieStartColor: argb($startColor);
	$ieEndColor: argb($endColor);

	filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ieStartColor}', endColorstr='#{ieEndColor}', GradientType=1)"; // 1
}

// 1. Filter for <= IE 9, does not work on pseudo elements

@mixin gradient_down($startColor: black, $endColor: white) {
	background-color: $startColor;
	background:
		linear-gradient(
			to bottom,
				$startColor,
				$endColor
		);

	$ieStartColor: argb($startColor);
	$ieEndColor: argb($endColor);

	filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ieStartColor}', endColorstr='#{ieEndColor}', GradientType=0)"; // 1
}

@mixin font_smoothing() {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin kill_flicker() {
	-webkit-font-smoothing: auto;
	transform: translateZ(0);
}

@mixin word_break() {
	overflow-wrap: break-word;
	word-wrap: break-word;
	word-break: break-all;
	word-break: break-word;
	hyphens: auto;
}


// Margins
// =============================================================================

@mixin margined_top($m: 1) {
	margin-top: $margin_sm * $m;
}

@mixin margined_bottom($m: 1) {
	margin-bottom: $margin_sm * $m;
}

@mixin margined($m: 1) {
	@include margined_top($m);
	@include margined_bottom($m);
}

@mixin margined_md_top($m: 1) {
	@include margined_top($m);

	@media #{$min_md} {
		margin-top: $margin_md * $m;
	}
}

@mixin margined_md_bottom($m: 1) {
	@include margined_bottom($m);

	@media #{$min_md} {
		margin-bottom: $margin_md * $m;
	}
}

@mixin margined_md($m: 1) {
	@include margined_md_top($m);
	@include margined_md_bottom($m);
}

@mixin margined_lg_top($m: 1) {
	@include margined_md_top($m);

	@media #{$min_lg} {
		margin-top: $margin_lg * $m;
	}
}

@mixin margined_lg_bottom($m: 1) {
	@include margined_md_bottom($m);

	@media #{$min_lg} {
		margin-bottom: $margin_lg * $m;
	}
}

@mixin margined_lg($m: 1) {
	@include margined_lg_top($m);
	@include margined_lg_bottom($m);
}

@mixin margined_xl_top($m: 1) {
	@include margined_lg_top($m);

	@media #{$min_xl} {
		margin-top: $margin_xl * $m;
	}
}

@mixin margined_xl_bottom($m: 1) {
	@include margined_lg_bottom($m);

	@media #{$min_xl} {
		margin-bottom: $margin_xl * $m;
	}
}

@mixin margined_xl($m: 1) {
	@include margined_xl_top($m);
	@include margined_xl_bottom($m);
}

@mixin margined_top_none() {
	margin-top: 0 !important;
}

@mixin margined_bottom_none() {
	margin-bottom: 0 !important;
}

@mixin margined_none() {
	@include margined_top_none;
	@include margined_bottom_none;
}


// Padding
// =============================================================================

@mixin padded_top() {
	padding-top: $margin_sm;
}

@mixin padded_bottom() {
	padding-bottom: $margin_sm;
}

@mixin padded() {
	@include padded_top;
	@include padded_bottom;
}

@mixin padded_md_top() {
	@include padded_top;

	@media #{$min_md} {
		padding-top: $margin_md;
	}
}

@mixin padded_md_bottom() {
	@include padded_bottom;

	@media #{$min_md} {
		padding-bottom: $margin_md;
	}
}

@mixin padded_md() {
	@include padded_md_top;
	@include padded_md_bottom;
}

@mixin padded_lg_top() {
	@include padded_md_top;

	@media #{$min_lg} {
		padding-top: $margin_lg;
	}
}

@mixin padded_lg_bottom() {
	@include padded_md_bottom;

	@media #{$min_lg} {
		padding-bottom: $margin_lg;
	}
}

@mixin padded_lg() {
	@include padded_lg_top;
	@include padded_lg_bottom;
}

@mixin padded_xl_top() {
	@include padded_lg_top;

	@media #{$min_xl} {
		padding-top: $margin_xl;
	}
}

@mixin padded_xl_bottom() {
	@include padded_lg_bottom;

	@media #{$min_xl} {
		padding-bottom: $margin_xl;
	}
}

@mixin padded_xl() {
	@include padded_xl_top;
	@include padded_xl_bottom;
}

@mixin padded_top_none() {
	padding-top: 0;
}

@mixin padded_bottom_none() {
	padding-bottom: 0;
}

@mixin padded_none() {
	@include padded_top_none;
	@include padded_bottom_none;
}


// Fake Padding
// =============================================================================

@mixin fake_padded_right() {
	padding-right: calc(20px + 1.04166667%);

	@media #{$min_md} {
		padding-right: calc((100% - 720px) / 2 + 1.04166667%);
	}

	@media #{$min_lg} {
		padding-right: calc((100% - 960px) / 2 + 1.04166667%);
	}

	@media #{$min_xl} {
		padding-right: calc((100% - 1200px) / 2 + 1.04166667%);
	}
}

@mixin fake_padded_left() {
	padding-left: calc(20px + 1.04166667%);

	@media #{$min_md} {
		padding-left: calc((100% - 720px) / 2 + 1.04166667%);
	}

	@media #{$min_lg} {
		padding-left: calc((100% - 960px) / 2 + 1.04166667%);
	}

	@media #{$min_xl} {
		padding-left: calc((100% - 1200px) / 2 + 1.04166667%);
	}
}

@mixin fake_padded() {
	@include fake_padded_right;
	@include fake_padded_left;
}


// Fake Margin
// =============================================================================

@mixin fake_margined_right($m: 1) {
	margin-right: calc((20px + 1.04166667%) * $m);

	@media #{$min_md} {
		margin-right: calc(((100% - 720px) / 2 + 1.04166667%) * $m);
	}

	@media #{$min_lg} {
		margin-right: calc(((100% - 960px) / 2 + 1.04166667%) * $m);
	}

	@media #{$min_xl} {
		margin-right: calc(((100% - 1200px) / 2 + 1.04166667%) * $m);
	}
}

@mixin fake_margined_left() {
	margin-left: calc((20px + 1.04166667%) * $m);

	@media #{$min_md} {
		margin-left: calc(((100% - 720px) / 2 + 1.04166667%) * $m);
	}

	@media #{$min_lg} {
		margin-left: calc(((100% - 960px) / 2 + 1.04166667%) * $m);
	}

	@media #{$min_xl} {
		margin-left: calc(((100% - 1200px) / 2 + 1.04166667%) * $m);
	}
}

@mixin fake_margined() {
	@include fake_margined_right;
	@include fake_margined_left;
}


// Helpers
// =============================================================================

@mixin block_left() {
	float: left;

	margin: 0 20px 20px 0;
}

@mixin block_right() {
	float: right;

	margin: 0 0 20px 20px;
}

@mixin block_center() {
	margin: 20px auto;
	text-align: center;
}

@mixin clearfix() {

	&:after {
		clear: both;
		content: "";
		display: table;
	}
}

.clearfix {
	@include clearfix;
}

@mixin no_select() {

	&,
	& * {
		user-select: none;
	}
}

@mixin hide() {
	display: none !important;
	visibility: hidden;
}

@mixin visually_hide() {
	width: 1px;
	height: 1px;

	position: absolute;

	border: 0;
	clip: rect(0 0 0 0);
	margin: -1px;
	overflow: hidden;
	padding: 0;

	&.focusable:active,
	&.focusable:focus {
		width: auto;
		height: auto;

		position: static;

		clip: auto;
		margin: 0;
		overflow: visible;
	}
}

.visually_hide {
	@include visually_hide;
}

@mixin offscreen() {
	width: 1px;
	height: 1px;

	position: absolute;
	left: -999px;

	overflow: hidden;
	z-index: -999;
}

@mixin video_frame() {
	width: 100%;

	position: relative;

	padding-bottom: 56.25%;

	iframe {
		width: 100%;
		height: 100%;

		position: absolute;
		top: 0;
		left: 0;
	}
}


// Transitions
// =============================================================================

@mixin transition_hide() {
	opacity: 0;
	pointer-events: none;
	transition:
		opacity $base_speed,
		visibility $base_speed;
	visibility: hidden;
}

@mixin transition_show() {
	opacity: 1;
	pointer-events: auto;
	visibility: visible;
}


// Images
// =============================================================================

@mixin image_1_1() {
	padding-top: 100%;
}

@mixin image_16_9() {
	padding-top: (9 / 16) * 100%;
}

@mixin image_3_2() {
	padding-top: (2 / 3) * 100%;
}

@mixin responsive_image() {
	display: block;

	picture {
		display: block;
	}

	img {
		display: block;

		width: 100%;
	}
}


// Modifier Conditions
// =============================================================================

@mixin sm_lg_display() {

	&_sm {

		@media #{$min_lg} {
			display: none;
		}
	}

	&_lg {

		@media #{$max_lg} {
			display: none;
		}
	}
}


// Layout
// =============================================================================

@mixin space_out() {
	align-items: center;
	display: flex;
	justify-content: space-between;
}

/* Not to be used with a form container */
/* Use -webkit-overflow-scrolling: auto instead */
@mixin fake_scroll($touch: true) {
	overflow-y: scroll;

	@if $touch {
		-webkit-overflow-scrolling: touch;
	} @else {
		-webkit-overflow-scrolling: auto;
	}
}


// Input Focus
// =============================================================================

// Uses 'What input ?' detection - https://github.com/ten1seven/what-input

[data-whatinput="mouse"] a:focus,
[data-whatinput="mouse"] button:focus,
[data-whatinput="touch"] a:focus,
[data-whatinput="touch"] button:focus {
	outline: none;
}

@mixin focus_outline_none() {

	[data-whatinput="mouse"] &:focus,
	[data-whatinput="touch"] &:focus {
		outline: none;
	}
}
